// Copyright 2020 The Blocks Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.UI;
using com.google.apps.peltzer.client.model.main;

/// <summary>
///   Let's have a nice game of Objectionary.
/// </summary>
public class Objectionary : MonoBehaviour
{
    private static readonly System.Random rnd = new System.Random();

    // All clips, and which clip to play next.
    private Dictionary<string, AudioClip> audioClipsByName = new Dictionary<string, AudioClip>();
    private List<string> audioClipNames = new List<string>();
    private int nextClipToPlay = -1;

    // Announcer/countdown timer.
    private AudioSource begin;
    private AudioSource tick;
    private AudioSource end;

    // Game state/constants.
    private bool isPlaying;
    private float timeGameStarted;
    private static float GAME_DURATION = 120;

    // We'll abuse the Poly version text for a countdown timer.
    Text titleText;

    /// <summary>
    /// All AudioSources generated by play requests, to be periodically cleaned up.
    /// </summary>
    private List<AudioSource> sources = new List<AudioSource>();

    /// <summary>
    /// Periodicity for cleanup, in seconds.
    /// </summary>
    private static float CLEANUP_INTERVAL = 5;
    /// <summary>
    /// Timestamp of most recent cleanup.
    /// </summary>
    private float lastCleanup;

    void Start()
    {
        begin = gameObject.AddComponent<AudioSource>();
        tick = gameObject.AddComponent<AudioSource>();
        end = gameObject.AddComponent<AudioSource>();
        begin.playOnAwake = false;
        tick.playOnAwake = false;
        end.playOnAwake = false;
        begin.clip = Resources.Load<AudioClip>("ObjectionaryMeta/begin");
        tick.clip = Resources.Load<AudioClip>("ObjectionaryMeta/tick");
        end.clip = Resources.Load<AudioClip>("ObjectionaryMeta/end");

        titleText = GameObject.Find("DesktopAppTitleText").GetComponentInChildren<Text>();

        Object[] allAudioClips = Resources.LoadAll("Objectionary");
        foreach (Object o in allAudioClips)
        {
            AudioClip audioClip = (AudioClip)o;
            audioClipsByName.Add(audioClip.name, audioClip);
            audioClipNames.Add(audioClip.name);
        }
        // 'Randomly order' the list.
        audioClipNames = audioClipNames.OrderBy(item => rnd.Next()).ToList();
    }

    /// <summary>
    ///   Periodically cleans up any expired AudioSources.
    /// </summary>
    void Update()
    {
        // Countdown & game over.
        if (isPlaying)
        {
            if (Time.time - timeGameStarted > GAME_DURATION - 10f)
            {
                if (!tick.isPlaying)
                {
                    tick.Play();
                }

                if (Time.time - timeGameStarted > GAME_DURATION)
                {
                    tick.Stop();
                    end.Play();
                    isPlaying = false;
                }
            }
        }

        // Countdown timer text.
        if (isPlaying)
        {
            float timeLeft = GAME_DURATION - (Time.time - timeGameStarted);
            string text = "Objectionary: " + timeLeft.ToString("0.00");
            titleText.text = text;
        }

        // Clean up.
        if (Time.time - lastCleanup > CLEANUP_INTERVAL)
        {
            lastCleanup = Time.time;
            List<AudioSource> newList = new List<AudioSource>();
            foreach (AudioSource source in sources)
            {
                if (!source.isPlaying)
                    DestroyImmediate(source);
                else
                    newList.Add(source);
            }
            sources = newList;
        }
    }

    /// <summary>
    ///   Play the next object, or cycle around and re-randomise the list.
    /// </summary>
    public void PlayNewObject()
    {
        if (audioClipNames.Count == 0)
        {
            Debug.Log("No audio clips");
            return;
        }

        // Start over if they've heard everything.
        if (++nextClipToPlay == audioClipNames.Count)
        {
            audioClipNames = audioClipNames.OrderBy(item => rnd.Next()).ToList();
            nextClipToPlay = 0;
        }

        // Get the next clip.
        AudioSource source = gameObject.AddComponent<AudioSource>();
        AudioClip toPlay = audioClipsByName[audioClipNames[nextClipToPlay]];

        // First time.
        if (!isPlaying)
        {
            isPlaying = true;
            timeGameStarted = Time.time;
            begin.Play();

            // Play delayed.
            source.clip = toPlay;
            source.PlayDelayed(1.5f);
            lastCleanup = Time.time + 5f; // Avoid cleaning up before playing.
            sources.Add(source);
            return;
        }

        // Normal.
        source.PlayOneShot(toPlay);
        sources.Add(source);
    }
}
